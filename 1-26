int removeElement(int* nums, int numsSize, int val)
{
	int src = 0;
	int dest = 0;
	while (src<numsSize)
	{
		if (nums[src] != val)
		{
			nums[dest] = nums[src];
			dest++;
			src++;
		}
		else
		{
			++src;
		}
	}
	return dest;
}
int main()
{
	int nums[] = { 2, 2, 3, 5, 68, 1, 2,1,3 };
	int numsSize = sizeof(nums) / sizeof(nums[2]);
	int val = 2;
	int ret=removeElement(nums, numsSize, val);
	printf("%d\n", ret);
	return 0;
}
char * toLowerCase(char * str)
{
	int i = 0;
	int len = 0;
	char *p = str;
	len = strlen(str);
	
	for (i = 0; i<len; i++)
	{
		if ((*(p + i) >= 65) && (*(p + i) <= 90))
		{
			*(p + i) = *(p + i) + 32;
		}
	}
	return str;
}
int main()
{
	char p1[] = "AaBBBbcdEf";
	toLowerCase(p1);
	printf("%s\n", p1);
	return 0;
}
char*My(char*p1)
{
	int i = 0;
	char*str = p1;
	int len = strlen(p1);
	for (i = 0; i < len; i++)
	{
		if (*(str + i) >= 65 && *(str + i) <= 90)
		{
			*(str + i) += 32;
		}
	}
	return p1;
}
int main()
{
	char p1[] = "AaBBBbcdEf";
	My(p1);
	printf("%s\n", p1);
	return 0;
}
int searchInsert(int* nums, int numsSize, int target){
	int left = 0;
	int right = numsSize - 1;
	int mid = (left + right) / 2;
	while (left <= right)
	{
		if (nums[mid]<target)
		{
			left = mid + 1;
		}
		else if (nums[mid]>target)
		{
			right = mid - 1;
		}
		else
			return mid;
	
	}
	return mid;
}
int main()
{
	int nums[] = { 1, 3, 5, 6 ,7};
	int target = 2;
	int numsSize = 5;
	int ret=searchInsert(nums, numsSize, target);
	printf("%d\n", ret);


}
